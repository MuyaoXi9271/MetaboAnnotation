#'generate a chromatogram for each row
intern_standard$mz <- lapply(intern_standard$formula, mass2mz,
adduct = intern_standard$POS)
#' Expand the m/z range by 0.01 on both sides
intern_standard$mzmin <- lapply(intern_standard$mz, "-",  0.01)
intern_standard$mzmax <- lapply(intern_standard$mz, "+",  0.01)
intern_standard$rtmin <- 0
intern_standard$rtmax <- 350
#' Extract the EICs
eics <- chromatogram(nafld, mz = as.matrix(intern_standard[, 14:15]), rt = as.matrix(intern_standard[, 16:17])) #had to force the rt because doesn't work without it ## update: chrom are empty
#' Extract the EICs
eics <- chromatogram(nafld, mz = as.vector(intern_standard[, 14:15]), rt = as.vector(intern_standard[, 16:17])) #had to force the rt because doesn't work without it ## update: chrom are empty
as.matrix(intern_standard[, 14:15])
intern_standard[, 14:15]
intern_standard[, 14:15]
#' get the list
intern_standard <- read.delim("C:/Users/plouail/Documents/GitHub/lcms-standards/data/internal_standards.txt")
intern_standard <- intern_standard[-4, ] ## remove succinic acid because no POS
#'generate a chromatogram for each row
intern_standard$mz <- lapply(intern_standard$formula, mass2mz,
adduct = intern_standard$POS)
#' Expand the m/z range by 0.01 on both sides
intern_standard$mzmin <- lapply(intern_standard$mz, "-",  0.01) |>
as.integer()
#' get the list
intern_standard <- read.delim("C:/Users/plouail/Documents/GitHub/lcms-standards/data/internal_standards.txt") |>
as.data.frame()
View(intern_standard)
intern_standard <- intern_standard[-4, ] ## remove succinic acid because no POS
#'generate a chromatogram for each row
intern_standard$mz <- lapply(intern_standard$formula, mass2mz,
adduct = intern_standard$POS)
#' Expand the m/z range by 0.01 on both sides
intern_standard$mzmin <- lapply(intern_standard$mz, "-",  0.01) |>
as.integer()
#'generate a chromatogram for each row
intern_standard[c(1,2,4:20), "mz"] <- mass2mz(intern_standard$formula, adduct = "[M+H]+")
View(intern_standard)
#'generate a chromatogram for each row
intern_standard[, "mz"] <- mass2mz(intern_standard$formula, adduct = "[M+H]+")
intern_standard[3, "mz"] <- mass2mz(intern_standard[3,"formula"], adduct = "[M+Na]+")
#' get the list
intern_standard <- read.delim("C:/Users/plouail/Documents/GitHub/lcms-standards/data/internal_standards.txt")
intern_standard <- intern_standard[-4, ] ## remove succinic acid because no POS
#'generate a chromatogram for each row
intern_standard[, "mz"] <- mass2mz(intern_standard$formula, adduct = "[M+H]+")
intern_standard[3, "mz"] <- mass2mz(intern_standard[3,"formula"], adduct = "[M+Na]+")
#' Expand the m/z range by 0.01 on both sides
intern_standard$mzmin <- lapply(intern_standard$mz, "-",  0.01)
intern_standard$mzmax <- lapply(intern_standard$mz, "+",  0.01)
intern_standard$rtmin <- 0
intern_standard$rtmax <- 350
#' Extract the EICs
eics <- chromatogram(nafld, mz = intern_standard[, 14:15]) #had to force the rt because doesn't work without it ## update: chrom are empty
intern_standard[, 14:15]
intern_standard[, 14:15]
intern_standard <- as.matrix(intern_standard)
#' Extract the EICs
eics <- chromatogram(nafld, mz = intern_standard[, 14:15]) #had to force the rt because doesn't work without it ## update: chrom are empty
#' Extract the EICs
eics <- chromatogram(nafld, mz = intern_standard[, 14:15], rt = intern_standard[, 16:17]) #had to force the rt because doesn't work without it ## update: chrom are empty
for (i in seq_len(nrow(intern_standard))) {
x <- intern_standard[i, c(2,3,4,6)]
png(paste("png/internal_standard/chromatogram/chromatogram", x$abbreviation, ".png"))
plot(eics[i], main = paste("chromatogram_all_sample_for_", x$abbreviation),
col = paste0(col_phenotype[chrom$sample_type], 80))
grid()
legend("topright", col = col_phenotype,
legend = names(col_phenotype), lty = 1)
abline(v = x$RT, col = "red", )
dev.off()
}
for (i in seq_len(nrow(intern_standard))) {
x <- intern_standard[i, c(2,3,4,6)]
png(paste("png/internal_standard/chromatogram/chromatogram", x$abbreviation, ".png"))
plot(eics[i], main = paste("chromatogram_all_sample_for_", x$abbreviation),
col = paste0(col_phenotype[eics$sample_type], 80))
grid()
legend("topright", col = col_phenotype,
legend = names(col_phenotype), lty = 1)
abline(v = x$RT, col = "red", )
dev.off()
}
intern_standard$rtmin
intern_standard$rtmax
intern_standard[,"rtmin"]
intern_standard[,"rtmin"] <- intern_standard[, "RT"] - 10
intern_standard[, "RT"]
intern_standard[,"rtmin"] <- lapply(intern_standard[, "RT"], "-", 10)
intern_standard[,"rtmax"] <- lapply(intern_standard[, "RT"], "+", 10)
eics <- chromatogram(nafld, mz = intern_standard[, 14:15], rt = intern_standard[, 16:17])
eics <- chromatogram(nafld, mz = intern_standard[, 14:15], rt = intern_standard[, 16:17])
#' loop through internal standard list and extract chromatogram
for (i in seq_len(nrow(intern_standard))) {
x <- intern_standard[i, c(2,3,4,6)]
for (i in seq_len(nrow(intern_standard))) {
x <- intern_standard[i, c(2,3,4,6)]
png(paste("png/internal_standard/chromatogram/chromatogram", x$abbreviation, ".png"))
plot(eics[i], main = paste("chromatogram_all_sample_for_", x$abbreviation),
col = paste0(col_phenotype[eics$sample_type], 80))
grid()
legend("topright", col = col_phenotype,
legend = names(col_phenotype), lty = 1)
abline(v = x$RT, col = "red", )
dev.off()
}
#' loop through internal standard list and extract chromatogram
for (i in seq_len(nrow(intern_standard))) {
x <- intern_standard[i, c(2,3,4,6)]
#'plot it add expected retention time
png(paste("png/internal_standard/chromatogram/chromatogram", x$abbreviation, ".png"))
plot(eics, main = paste("chromatogram_all_sample_for_", x$abbreviation),
col = paste0(col_phenotype[eics$sample_type], 80))
grid()
legend("topright", col = col_phenotype,
legend = names(col_phenotype), lty = 1)
abline(v = x$RT, col = "red", )
dev.off()
x$abbreviation
}
#'  extract EIC with RT
for (i in seq_len(nrow(intern_standard))) {
x <- intern_standard[i, c(2,3,4,6)]
#'plot it add expected retention time
png(paste("png/internal_standard/EIC/EIC", x$abbreviation, ".png"))
plot(eics[i], main = paste("EIC_all_sample_for_", x$abbreviation),
col = paste0(col_phenotype[eics$sample_type], 80))
grid()
legend("topright", col = col_phenotype,
legend = names(col_phenotype), lty = 1)
abline(v = x$RT, col = "red", )
dev.off()
}
#' get the list
intern_standard <- read.delim("C:/Users/plouail/Documents/GitHub/lcms-standards/data/internal_standards.txt")
intern_standard <- intern_standard[-4, ] ## remove succinic acid because no POS
#'generate a chromatogram for each row
intern_standard[, "mz"] <- mass2mz(intern_standard$formula, adduct = "[M+H]+")
intern_standard[3, "mz"] <- mass2mz(intern_standard[3,"formula"], adduct = "[M+Na]+")
#' Expand the m/z range by 0.01 on both sides
intern_standard$mzmin <- lapply(intern_standard$mz, "-",  0.005)
intern_standard$mzmax <- lapply(intern_standard$mz, "+",  0.005)
intern_standard$rtmin <- 0
intern_standard$rtmax <- 350
intern_standard <- as.matrix(intern_standard)
#' Extract the EICs no RT
eics <- chromatogram(nafld, mz = intern_standard[, 14:15], rt = intern_standard[, 16:17]) #had to force the rt because doesn't work without it
for (i in seq_len(nrow(intern_standard))) {
x <- intern_standard[i, c(2,3,4,6)]
png(paste("png/internal_standard/chromatogram/chromatogram", x$abbreviation, ".png"))
plot(eics[i], main = paste("chromatogram_all_sample_for_", x$abbreviation),
col = paste0(col_phenotype[eics$sample_type], 80))
grid()
legend("topright", col = col_phenotype,
legend = names(col_phenotype), lty = 1)
abline(v = x$RT, col = "red", )
dev.off()
}
intern_standard[,"rtmin"] <- lapply(intern_standard[, "RT"], "-", 10)
intern_standard[,"rtmax"] <- lapply(intern_standard[, "RT"], "+", 10)
eics <- chromatogram(nafld, mz = intern_standard[, 14:15], rt = intern_standard[, 16:17])
#'  extract EIC with RT
for (i in seq_len(nrow(intern_standard))) {
x <- intern_standard[i, c(2,3,4,6)]
#'plot it add expected retention time
png(paste("png/internal_standard/EIC/EIC", x$abbreviation, ".png"))
plot(eics[i], main = paste("EIC_all_sample_for_", x$abbreviation),
col = paste0(col_phenotype[eics$sample_type], 80))
grid()
legend("topright", col = col_phenotype,
legend = names(col_phenotype), lty = 1)
abline(v = x$RT, col = "red", )
dev.off()
}
#' what does it mean exactly ? what about the multiple peaks ones ? do on ALL sample ?
package.version("xcms")
#' Extract the EICs no RT
eics <- chromatogram(nafld, mz = intern_standard[, 14:15]) #had to force the rt because doesn't work without it
class(intern_standard)
head(intern_standard)
intern_standard[, "mzmin"]
#' get the list
intern_standard <- read.delim("C:/Users/plouail/Documents/GitHub/lcms-standards/data/internal_standards.txt")
intern_standard <- intern_standard[-4, ] ## remove succinic acid because no POS
head(intern_standard)
class(intern_standard)
intern_standard <- intern_standard[-4, ] ## remove succinic acid because no POS
#'generate a chromatogram for each row
intern_standard[, "mz"] <- mass2mz(intern_standard$formula, adduct = "[M+H]+")[, 1]
intern_standard[, 1]
intern_standard[, "mz"]
intern_standard[3, "mz"] <- mass2mz(intern_standard[3,"formula"], adduct = "[M+Na]+")[, 1]
#' Expand the m/z range by 0.01 on both sides
intern_standard$mzmin <- intern_standard$mz - 0.005
intern_standard$mzmax <- intern_standard$mz + 0.005
intern_standard$rtmin <- 0
intern_standard$rtmax <- 350
#' Extract the EICs no RT
eics <- chromatogram(nafld, mz = intern_standard[, 14:15]) #had to force the rt because doesn't work without it
#' Extract the EICs no RT
eics <- chromatogram(nafld, mz = as.matrix(intern_standard[, 14:15])) #had to force the rt because doesn't work without it
as.matrix(intern_standard[, 14:15])
class(nafld)
View(intern_standard)
#' Extract the EICs no RT
eics <- chromatogram(nafld, mz = as.matrix(intern_standard[, 14:15]), rt = as.matrix(intern_standard[, 16:17])) #had to force the rt because doesn't work without it
#' Extract the EICs no RT
eics <- chromatogram(nafld, mz = as.matrix(intern_standard[, 14:15]), rt = as.matrix(intern_standard[, 16:17])) #had to force the rt because doesn't work without it
for (i in seq_len(nrow(intern_standard))) {
x <- intern_standard[i, c(2,3,4,6)]
png(paste("png/internal_standard/chromatogram/chromatogram", x$abbreviation, ".png"))
plot(eics[i], main = paste("chromatogram_all_sample_for_", x$abbreviation),
col = paste0(col_phenotype[eics$sample_type], 80))
grid()
legend("topright", col = col_phenotype,
legend = names(col_phenotype), lty = 1)
abline(v = x$RT, col = "red", )
dev.off()
}
intern_standard[,"rtmin"] <- lapply(intern_standard[, "RT
], "-", 10)
intern_standard[,"rtmax"] <- lapply(intern_st
intern_standard[,"rtmin"] <- intern_standard[, "RT"] - 10
intern_standard[,"rtmax"] <- intern_standard[, "RT"] + 10
eics <- chromatogram(nafld, mz = as.matrix(intern_standard[, 14:15]), rt = as.matrix(intern_standard[, 16:17]))
eics <- chromatogram(nafld, mz = as.matrix(intern_standard[, 14:15]), rt = as.matrix(intern_standard[, 16:17]))
#'  extract EIC with RT
for (i in seq_len(nrow(intern_standard))) {
x <- intern_standard[i, c(2,3,4,6)]
#'plot it add expected retention time
png(paste("png/internal_standard/EIC/EIC", x$abbreviation, ".png"))
plot(eics[i], main = paste("EIC_all_sample_for_", x$abbreviation),
col = paste0(col_phenotype[eics$sample_type], 80))
grid()
legend("topright", col = col_phenotype,
legend = names(col_phenotype), lty = 1)
abline(v = x$RT, col = "red", )
dev.off()
}
BiocManager::install()
BiocManager::install(version = "devel")
library(AnnotationHub)
library(MetaboAnnotation)
library(Spectra)
library(AnnotationHub)
library(MetaboCoreUtils)
library(readxl)
system.file("extdata", "Standard_list_example.xlsx",
package = "MetaboAnnotation")
system.file("extdata", "MS1_example.txt",
package = "MetaboAnnotation")
system.file("extdata",
package = "MetaboAnnotation")
system.file("extdata", "Standard_list_example.xlsx"
package = "MetaboAnnotation")
system.file("extdata", "Standard_list_example.xlsx",
package = "MetaboAnnotation")
?system.file
#remove after
standards <- read_xlsx("C:/Users/plouail/Documents/GitHub/MetaboAnnotation/inst/extdata")
#remove after
standards <- read_xlsx("C:/Users/plouail/Documents/GitHub/MetaboAnnotation/inst/extdata/Standard_list_example.xlsx")
View(standards)
View(standards)
#remove after
standards <- read_xlsx("C:/Users/plouail/Documents/GitHub/MetaboAnnotation/inst/extdata/Standard_list_example.xlsx")
#' Calculate mass based on formula of compounds
standard$mass <- calculateMass(standard_large$formula)
#' Calculate mass based on formula of compounds
standard$mass <- calculateMass(standard$formula)
#remove after
standard <- read_xlsx("C:/Users/plouail/Documents/GitHub/MetaboAnnotation/inst/extdata/Standard_list_example.xlsx")
#' Calculate mass based on formula of compounds
standard$mass <- calculateMass(standard$formula)
#' Create input for function
#' Calculate charge for 2 adducts
standard_charged <- mass2mz(standard$mass, adduct = c("[M+H]+", "[M+Na]+"))
#' have compunds names as rownames
rownames(standard_charged) <- standard[,1]
View(standard)
View(standard_charged)
View(standard)
standard[ , 1]
#remove after
standard <- read_xlsx("C:/Users/plouail/Documents/GitHub/MetaboAnnotation/inst/extdata/Standard_list_example.xlsx")
#' Calculate mass based on formula of compounds
standard$mass <- calculateMass(standard$formula)
#remove after
standard <- read_xlsx("C:/Users/plouail/Documents/GitHub/MetaboAnnotation/inst/extdata/Standard_list_example.xlsx")
#' Calculate mass based on formula of compounds
standard$mass <- calculateMass(standard$formula)
#' Create input for function
#' Calculate charge for 2 adducts
standard_charged <- mass2mz(standard$mass, adduct = c("[M+H]+", "[M+Na]+"))[, 1]
#' have compunds names as rownames
rownames(standard_charged) <- standard[ , 1]
View(standards)
View(standard)
#remove after
standard <- read_xlsx("C:/Users/plouail/Documents/GitHub/MetaboAnnotation/inst/extdata/Standard_list_example.xlsx")
#' Calculate mass based on formula of compounds
standard$mass <- calculateMass(standard$formula)
#' Create input for function
#' Calculate charge for 2 adducts
standard_charged <- mass2mz(standard$mass, adduct = c("[M+H]+", "[M+Na]+"))
#' have compunds names as rownames
rownames(standard_charged) <- standard[ , 1]
#remove after
standard <- read_xlsx("C:/Users/plouail/Documents/GitHub/MetaboAnnotation/inst/extdata/Standard_list_example.xlsx") |>
as.data.frame()
#' Calculate mass based on formula of compounds
standard$mass <- calculateMass(standard$formula)
#' Create input for function
#' Calculate charge for 2 adducts
standard_charged <- mass2mz(standard$mass, adduct = c("[M+H]+", "[M+Na]+"))
#remove after
standard <- read_xlsx("C:/Users/plouail/Documents/GitHub/MetaboAnnotation/inst/extdata/Standard_list_example.xlsx") |>
as.data.frame()
#' Calculate mass based on formula of compounds
standard$mass <- calculateMass(standard$formula)
#' Create input for function
#' Calculate charge for 2 adducts
standard_charged <- mass2mz(standard$mass, adduct = c("[M+H]+", "[M+Na]+"))
#' have compunds names as rownames
rownames(standard_charged) <- standard[ , 1]
#remove after
standard <- read_xlsx("C:/Users/plouail/Documents/GitHub/MetaboAnnotation/inst/extdata/Standard_list_example.xlsx")
#' Calculate mass based on formula of compounds
standard$mass <- calculateMass(standard$formula)
#' Create input for function
#' Calculate charge for 2 adducts
standard_charged <- mass2mz(standard$mass, adduct = c("[M+H]+", "[M+Na]+"))
#' have compunds names as rownames
rownames(standard_charged) <- standard[ , 1]
#remove after
standard <- read_xlsx("C:/Users/plouail/Documents/GitHub/MetaboAnnotation/inst/extdata/Standard_list_example.xlsx") |>
as.data.frame()
#' Calculate mass based on formula of compounds
standard$mass <- calculateMass(standard$formula)
#' Create input for function
#' Calculate charge for 2 adducts
standard_charged <- mass2mz(standard$mass, adduct = c("[M+H]+", "[M+Na]+"))
#' have compunds names as rownames
rownames(standard_charged) <- standard[ , 1]
#' ensure the input `x` is a matrix
if (!is.matrix(standard_charged))
standard_charged <- as.matrix(standard_charged)
standard_charged
group_no_randimozation <- createStandardMixes(standard_charged)
group_no_randimozation
View(group_no_randimozation)
table(group_no_randimozation$group)
standard_charged[101, ] <- c("4-hydroxy-3-methylbenzoic acid", "C7H6O3")
standard_charged[101, ] <- rbind(c("4-hydroxy-3-methylbenzoic acid", "C7H6O3"))
standard_charged <- rbind(standard_charged, c("4-hydroxy-3-methylbenzoic acid", "C7H6O3"))
View(standard_charged)
group_no_randomization <- createStandardMixes(standard_charged[1:20])
#remove after
standard <- read_xlsx("C:/Users/plouail/Documents/GitHub/MetaboAnnotation/inst/extdata/Standard_list_example.xlsx") |>
as.data.frame()
#' Calculate mass based on formula of compounds
standard$mass <- calculateMass(standard$formula)
#' Create input for function
#' Calculate charge for 2 adducts
standard_charged <- mass2mz(standard$mass, adduct = c("[M+H]+", "[M+Na]+"))
#' have compunds names as rownames
rownames(standard_charged) <- standard[ , 1]
#' ensure the input `x` is a matrix
if (!is.matrix(standard_charged))
group_no_randomization <- createStandardMixes(standard_charged[1:20])
#' ensure the input `x` is a matrix
if (!is.matrix(standard_charged))
standard_charged <- as.matrix(standard_charged)
group_no_randomization <- createStandardMixes(standard_charged[1:20])
standard_charged[1:20]
group_no_randomization <- createStandardMixes(standard_charged[1:20,])
group_no_randomization
table(group_no_randomization$group)
group_no_randimozation <- createStandardMixes(standard_charged)
table(group_no_randomization$group)
group_no_randomization <- createStandardMixes(standard_charged)
table(group_no_randomization$group)
group_with_ramdomization <- createStandardMixes(standard_charged,
iterativeRandomization = TRUE)
table(group_with_ramdomization$group)
group_with_ramdomization <- createStandardMixes(standard_charged,
max_nstd = 20,
min_nstd = 15,
min_diff = 3,
iterativeRandomization = TRUE)
group_with_ramdomization <- createStandardMixes(standard_charged,
max_nstd = 20,
min_nstd = 10,
min_diff = 3,
iterativeRandomization = TRUE)
set.seed(123)
group_with_ramdomization <- createStandardMixes(standard_charged,
max_nstd = 20,
min_nstd = 10,
min_diff = 2,
iterativeRandomization = TRUE)
group_with_ramdomization <- createStandardMixes(standard_charged,
max_nstd = 15,
min_nstd = 10,
min_diff = 2,
iterativeRandomization = TRUE)
table(group_with_ramdomization$group)
library("BiocStyle")
library("knitr")
library("rmarkdown")
opts_chunk$set(message = FALSE, error = FALSE, warning = FALSE,
cache = FALSE, fig.width = 7, fig.height = 7)
library(MsExperiment)
library(xcms)
library(MsExperiment)
library(Spectra)
library(RColorBrewer)
library(pander)
library(readxl)
library(MetaboCoreUtils)
library(pheatmap)
library(xcms)
biocmanager\
BiocManager::install()
BiocManager::install(version + "devel")
BiocManager::install(version = "devel")
install.packages()
update.packages()
install.packages("LaTeX")
install.packages("latex")
tinytex::install_tinytex()
library(MsExperiment)
library(xcms)
BiocManager::install()
BiocManager::install(version = "devel")
install.packages(c("htmltools", "httpuv", "lattice", "utf8", "vctrs"))
install.packages(c("htmltools", "httpuv", "lattice", "utf8", "vctrs"))
install.packages(c("htmltools", "httpuv", "lattice", "utf8", "vctrs"))
library(MsExperiment)
library(MsExperiment)
library(xcms)
library(Spectra)
library(RColorBrewer)
library(pander)
library(readxl)
library(MetaboCoreUtils)
library(pheatmap)
library(MsExperiment)
library(xcms)
library(Spectra)
library(RColorBrewer)
library(pander)
library(readxl)
library(MetaboCoreUtils)
library(pheatmap)
read.csv
?read.csv
#remove after
standard <- read.table("C:/Users/plouail/Documents/GitHub/MetaboAnnotation/inst/extdata/Standard_list_example.txt", header = TRUE, sep = "\t") |>
as.data.frame()
View(standard)
read.table(system.file("extdata", "Standard_list_example.txt",
package = "MetaboAnnotation"),
header = TRUE, sep = "\t", quote = "")
standard <- read.table("C:/Users/plouail/Documents/GitHub/MetaboAnnotation/inst/extdata/Standard_list_example.txt", header = TRUE, sep = "\t", quote = "",)
View(standard)
#remove after
standard <- read.table("C:/Users/plouail/Documents/GitHub/MetaboAnnotation/inst/extdata/Standard_list_example.txt", header = TRUE, sep = "\t", quote = "",) |>
as.data.frame()
#' Calculate mass based on formula of compounds
standard$mass <- calculateMass(standard$formula)
#' Create input for function
#' Calculate charge for 2 adducts
standard_charged <- mass2mz(standard$mass, adduct = c("[M+H]+", "[M+Na]+"))
#' have compounds names as rownames
rownames(standard_charged) <- standard[ , 1]
#' ensure the input `x` is a matrix
if (!is.matrix(standard_charged))
standard_charged <- as.matrix(standard_charged)
standard_charged
group_no_randomization <- createStandardMixes(standard_charged[1:20,])
library(MetaboAnnotation)
group_no_randomization <- createStandardMixes(standard_charged[1:20,])
group_no_randomization
table(group_no_randomization$group)
group_no_randomization <- createStandardMixes(standard_charged)
table(group_no_randomization$group)
group_with_ramdomization <- createStandardMixes(standard_charged,
iterativeRandomization = TRUE)
table(group_with_ramdomization$group)
set.seed(123)
group_with_ramdomization <- createStandardMixes(standard_charged,
max_nstd = 15,
min_nstd = 10,
min_diff = 2,
iterativeRandomization = TRUE)
table(group_with_ramdomization$group)
write.xlsx(group_with_ramdomization,
file = "standard_mixes.xlsx",
rowNames = TRUE)
View(group_with_ramdomization)
write.table(group_with_ramdomization,
file = "standard_mixes.xlsx", header = TRUE, sep = "\t",
quote = "", row.names = TRUE)
write.table(group_with_ramdomization,
file = "standard_mixes.text", sep = "\t")
getwd()
write.table(group_with_ramdomization,
file = "standard_mixes.text", sep = "\t", quote = FALSE)
setwd("~/GitHub/MetaboAnnotation")
setwd("~/GitHub/MetaboAnnotation/R")
devtools::document()
